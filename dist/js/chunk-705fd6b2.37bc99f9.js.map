{"version":3,"sources":["webpack:///./src/class/GenerateMySQLQuery.js","webpack:///./node_modules/core-js/modules/es.string.trim.js","webpack:///./node_modules/core-js/internals/whitespaces.js","webpack:///./node_modules/core-js/internals/string-trim.js","webpack:///./src/class/GenerateView.js","webpack:///./src/class/GenerateRoutes.js","webpack:///./node_modules/core-js/modules/es.object.keys.js","webpack:///./node_modules/@babel/runtime/helpers/esm/createClass.js","webpack:///./node_modules/core-js/internals/string-trim-forced.js","webpack:///./node_modules/@babel/runtime/helpers/esm/classCallCheck.js","webpack:///./src/class/GenerateController.js","webpack:///./src/class/GenerateModel.js"],"names":["GenerateMySQLQuery","column","this","queryString","primaryColumn","uniqueColumn","undefined","Error","index","col","tableName","colString1","singleColumnString","console","error","length","parseInt","colString3","slice","pColIndex","uniqueString","makeUniqueString","colString2","dbOtherOption","indexOf","name","push","sort","colString","dbType","dbLength","dbdefaultValueType","dbdefaultValue","trim","uniqueCol","Object","keys","returnString","uniqueColIndex","columns","indexName","columnName","key","$","$trim","forcedStringTrimMethod","target","proto","forced","module","exports","requireObjectCoercible","whitespaces","whitespace","ltrim","RegExp","rtrim","createMethod","TYPE","$this","string","String","replace","start","end","GenerateView","obj","viewContent","overrideControllerName","toUpperCase","GenerateRoutes","type","apiContent","routePrefix","toLocaleLowerCase","routes","path","controller","method","requestMethod","apiRoutePrefix","apiRoutes","simpleRoutes","groupingRoutes","moduleRoutes","route","toObject","nativeKeys","fails","FAILS_ON_PRIMITIVES","stat","it","_defineProperties","props","i","descriptor","enumerable","configurable","writable","defineProperty","_createClass","Constructor","protoProps","staticProps","prototype","non","METHOD_NAME","_classCallCheck","instance","TypeError","GenerateController","dbTableName","dbTableColumn","isModuleMethodContentFill","moduleController","insertMethodContent","content","formValidation","checkFirstValidationRule","forEach","validationRules","label","rule","value","GenerateModel","table","tableColumn","moduleModel","JSON","stringify","moduleModelEntities"],"mappings":"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","file":"js/chunk-705fd6b2.37bc99f9.js","sourcesContent":["class GenerateMySQLQuery {\r\n\r\n  constructor(column) {\r\n    // Column Object Data\r\n    this.column = column\r\n\r\n    // Generate MySQL Query String\r\n    this.queryString = \"\"\r\n    // Table Primary Column Name\r\n    this.primaryColumn = []\r\n    // Table Unique Column's Name\r\n    this.uniqueColumn = {}\r\n  }\r\n\r\n  generateQuery() {\r\n    if (this.column === undefined || this.column === null || typeof (this.column) !== \"object\") {\r\n      throw new Error('MySQL Query Column Data Not Found.')\r\n    }\r\n\r\n    for (const index in this.column) {\r\n      const col = this.column[index];\r\n      if (index == 0) {\r\n\r\n        /**\r\n         * First Column\r\n         */\r\n        this.queryString += \"CREATE TABLE `\" + col.tableName + \"` ( \\n\";\r\n\r\n        // {@call}\r\n        var colString1 = this.singleColumnString(col);\r\n        if (colString1 === false) {\r\n          // TODO\r\n          console.error(\"createMysqlDatabaseTable -> colString1\", colString1)\r\n          break\r\n        } else {\r\n          this.queryString += \"  \" + colString1;\r\n        }\r\n\r\n      } else if (this.column.length == (parseInt(index) + 1)) {\r\n\r\n        /**\r\n         * Last Column\r\n         */\r\n\r\n        // {@call}\r\n        var colString3 = this.singleColumnString(col);\r\n        if (colString3 === false) {\r\n          // TODO\r\n          console.error(\"createMysqlDatabaseTable -> colString3\", colString3)\r\n          break\r\n        } else {\r\n          if (this.primaryColumn.length > 0) {\r\n            this.queryString += \"  \" + colString3; // Last Char With (,)\r\n          } else {\r\n            this.queryString = this.queryString.slice(0, -1);\r\n          }\r\n        }\r\n\r\n        /**\r\n         * Add Primary Columns and AUTO INCREMENT\r\n         */\r\n        if (this.primaryColumn.length > 0) {\r\n          this.queryString += \"  PRIMARY KEY (\";\r\n          for (const pColIndex in this.primaryColumn) {\r\n            if (this.primaryColumn.length == (parseInt(pColIndex) + 1)) {\r\n              // Last Primary Column Index\r\n              this.queryString += \"`\"+ this.primaryColumn[pColIndex] + \"`\";\r\n            } else {\r\n              this.queryString += \"`\"+ this.primaryColumn[pColIndex] + \"`, \";\r\n            }\r\n          }\r\n          this.queryString += \"),\";\r\n        }\r\n\r\n        // {@call}: Make MySQL Unique Column\r\n        var uniqueString = this.makeUniqueString(this.uniqueColumn);\r\n        if (uniqueString) {\r\n          this.queryString += \"\\n\"+ uniqueString\r\n          // Remove Last Entry\r\n          this.queryString = this.queryString.slice(0, -2);\r\n        } else {\r\n          // Remove Last Comma\r\n          this.queryString = this.queryString.slice(0, -1);\r\n        }\r\n\r\n        this.queryString += \"\\n) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_0900_ai_ci;\";\r\n\r\n      } else {\r\n\r\n        /**\r\n         * Middle Column\r\n         */\r\n\r\n        // {@call}\r\n        var colString2 = this.singleColumnString(col);\r\n        if (colString2 === false) {\r\n          // TODO\r\n          console.error(\"createMysqlDatabaseTable -> colString2\", colString2)\r\n          break\r\n        } else {\r\n          this.queryString += \"  \" + colString2;\r\n        }\r\n      }\r\n\r\n      /**\r\n       * Check Other Options\r\n       * ------------------------------------\r\n       * col.dbOtherOption.indexOf(\"AUTO INCREMENT\")\r\n       * col.dbOtherOption.indexOf(\"Unique\")\r\n       * col.dbOtherOption.indexOf(\"Primary\")\r\n       */\r\n      if (typeof (col.dbOtherOption) === \"object\") {\r\n        if (col.dbOtherOption.indexOf(\"Primary\") !== -1) {\r\n          if (this.primaryColumn[col.name] === undefined)\r\n            this.primaryColumn.push(col.name)\r\n        } else if (col.dbOtherOption.indexOf(\"AUTO INCREMENT\") !== -1) {\r\n          if (this.primaryColumn[col.name] === undefined)\r\n            this.primaryColumn.push(col.name)\r\n        }\r\n\r\n        // UNIQUE KEY\r\n        if (col.dbOtherOption.indexOf(\"Unique\") !== -1) {\r\n          this.uniqueColumn[col.name] = col.sort\r\n        }\r\n      }\r\n    }\r\n\r\n    return this.queryString;\r\n  }\r\n\r\n  /**\r\n   * [PRIVATE]\r\n   * ---------------------------------------\r\n   * Make MySQL Column\r\n   */\r\n  singleColumnString(col) {\r\n    // console.log(\"GenerateMySQLQuery -> singleColumnString -> col\", col)\r\n\r\n    var colString = \"\";\r\n\r\n    /**\r\n     * Column: Name\r\n     */\r\n    if (col.name !== undefined && col.name !== \"\" && col.name !== null && col.name !== false) {\r\n      colString += \" `\" + col.name + \"` \";\r\n    } else { return false }\r\n\r\n    /**\r\n     * Column: DataType\r\n     */\r\n    if (col.dbType !== undefined && col.dbType !== \"\" && col.dbType !== null && col.dbType !== false) {\r\n      colString += col.dbType + \" \";\r\n    } else { return false }\r\n\r\n    /**\r\n     * Column: Length\r\n     */\r\n    if (col.dbType !== \"text\") {\r\n      if (col.dbLength !== undefined && col.dbLength !== \"\" && col.dbLength !== null && col.dbLength !== false) {\r\n        colString += \"(\" + col.dbLength + \") \";\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Default Value\r\n     */\r\n    if (col.dbdefaultValueType !== undefined && col.dbdefaultValueType !== \"\" && col.dbdefaultValueType !== null && col.dbdefaultValueType !== false) {\r\n      if (col.dbdefaultValueType == \"None\") {\r\n        // None\r\n        colString += \"NOT NULL \";\r\n      } else if (col.dbdefaultValueType == \"NULL\") {\r\n        // NULL\r\n        colString += \"NULL \";\r\n      } else if (col.dbdefaultValueType == \"CURRENT TIMESTAMP\") {\r\n        // CURRENT TIMESTAMP\r\n        colString += \"NOT NULL DEFAULT CURRENT_TIMESTAMP \";\r\n      } else if (col.dbdefaultValueType == \"As Defined\") {\r\n        // As Defined\r\n        colString += \"NOT NULL DEFAULT '\" + col.dbdefaultValue + \"' \";\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Check: AUTO INCREMENT\r\n     */\r\n    if (col.dbOtherOption !== undefined && col.dbOtherOption.length > 0) {\r\n      if (col.dbOtherOption.indexOf(\"AUTO INCREMENT\") !== -1) {\r\n        colString += \"AUTO_INCREMENT \";\r\n      }\r\n    }\r\n\r\n    // Return String\r\n    return colString.trim() + \",\\n\";\r\n  }\r\n\r\n  /**\r\n   * [PRIVATE]\r\n   * ------------------------------------\r\n   * Make MySQL Unique Content\r\n   * @param {*} uniqueCol \r\n   */\r\n  makeUniqueString(uniqueCol) {\r\n    if (uniqueCol && Object.keys(uniqueCol).length > 0) {\r\n\r\n      // Return Unique Column String\r\n      var returnString = \"\";\r\n\r\n      for (const index in uniqueCol) {\r\n        // Check Column Exists and Column Name is Same\r\n        if (this.column[uniqueCol[index]] !== undefined && this.column[uniqueCol[index]].name === index) {\r\n          if (this.column[uniqueCol[index]].uniqueColIndex !== undefined) {\r\n            var uniqueColIndex = this.column[uniqueCol[index]].uniqueColIndex;\r\n            if (uniqueColIndex.columns !== undefined) {\r\n              \r\n              // UNIQUE KEY `user` (`user`),\r\n              returnString += \"  UNIQUE KEY `\"+ uniqueColIndex.indexName + \"` (\";\r\n\r\n              var columnName = []; // For Check Key Already Exists\r\n              for (const key of uniqueColIndex.columns) {\r\n                // Check Column Key Already Exists\r\n                if (columnName.indexOf(key.name) === -1) {\r\n                  columnName.push(key.name);\r\n\r\n                  // Check Unique Key Name in the All Unique Column Names \r\n                  if (uniqueCol[key.name] !== undefined) {\r\n                    returnString += \"`\" + key.name + \"`,\"\r\n                  }\r\n                }\r\n              }\r\n              // Remove Last Comma\r\n              returnString = returnString.slice(0, -1);\r\n              returnString += \"),\\n\";\r\n\r\n            } else { continue }\r\n          } else { continue }\r\n        } else { continue }\r\n      }\r\n\r\n      return returnString;\r\n    }\r\n    return false\r\n  }\r\n}\r\n\r\nexport default GenerateMySQLQuery","'use strict';\nvar $ = require('../internals/export');\nvar $trim = require('../internals/string-trim').trim;\nvar forcedStringTrimMethod = require('../internals/string-trim-forced');\n\n// `String.prototype.trim` method\n// https://tc39.github.io/ecma262/#sec-string.prototype.trim\n$({ target: 'String', proto: true, forced: forcedStringTrimMethod('trim') }, {\n  trim: function trim() {\n    return $trim(this);\n  }\n});\n","// a string of all valid unicode whitespaces\n// eslint-disable-next-line max-len\nmodule.exports = '\\u0009\\u000A\\u000B\\u000C\\u000D\\u0020\\u00A0\\u1680\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u202F\\u205F\\u3000\\u2028\\u2029\\uFEFF';\n","var requireObjectCoercible = require('../internals/require-object-coercible');\nvar whitespaces = require('../internals/whitespaces');\n\nvar whitespace = '[' + whitespaces + ']';\nvar ltrim = RegExp('^' + whitespace + whitespace + '*');\nvar rtrim = RegExp(whitespace + whitespace + '*$');\n\n// `String.prototype.{ trim, trimStart, trimEnd, trimLeft, trimRight }` methods implementation\nvar createMethod = function (TYPE) {\n  return function ($this) {\n    var string = String(requireObjectCoercible($this));\n    if (TYPE & 1) string = string.replace(ltrim, '');\n    if (TYPE & 2) string = string.replace(rtrim, '');\n    return string;\n  };\n};\n\nmodule.exports = {\n  // `String.prototype.{ trimLeft, trimStart }` methods\n  // https://tc39.github.io/ecma262/#sec-string.prototype.trimstart\n  start: createMethod(1),\n  // `String.prototype.{ trimRight, trimEnd }` methods\n  // https://tc39.github.io/ecma262/#sec-string.prototype.trimend\n  end: createMethod(2),\n  // `String.prototype.trim` method\n  // https://tc39.github.io/ecma262/#sec-string.prototype.trim\n  trim: createMethod(3)\n};\n","class GenerateView {\r\n\r\n  constructor(obj) {\r\n    if (!obj || Object.keys(obj).length <= 0) {\r\n      throw Error(\"Model Data Not Found.\")\r\n    }\r\n\r\n    if (!obj.module) {\r\n      throw Error(\"Please Define Module Name.\")\r\n    }\r\n\r\n    // Module Name\r\n    this.module = obj.module\r\n  }\r\n\r\n  /**\r\n   * Get Mange Page Content\r\n   */\r\n  getManageView() {\r\n\r\n    // Empty Controller File Content\r\n    var viewContent = \"\";\r\n\r\n    viewContent += \"<h1>MANAGE \" + this.overrideControllerName(this.module) + \"</h1>\";\r\n\r\n    return viewContent\r\n  }\r\n\r\n  /**\r\n   * Get Insert Page Content\r\n   */\r\n  getInsertView() {\r\n\r\n    // Empty Controller File Content\r\n    var viewContent = \"\";\r\n\r\n    viewContent += \"<h1>INSERT \" + this.overrideControllerName(this.module) + \"</h1>\";\r\n\r\n    return viewContent\r\n  }\r\n\r\n  /**\r\n   * Get Update Page Content\r\n   */\r\n  getUpdateView() {\r\n\r\n    // Empty Controller File Content\r\n    var viewContent = \"\";\r\n\r\n    viewContent += \"<h1>UPDATE \" + this.overrideControllerName(this.module) + \"</h1>\";\r\n\r\n    return viewContent\r\n  }\r\n\r\n  /**\r\n   * Override Controller Name\r\n   * @param {*} name \r\n   * --------------------------\r\n   * [People_message to PEOPLE MESSAGE]\r\n   */\r\n  overrideControllerName(name) {\r\n    if (!name) {\r\n      return\r\n    }\r\n\r\n    if (name.indexOf(\"_\") !== -1) {\r\n      return name.replace(/_/g, \" \").toUpperCase()\r\n    }\r\n    return name.toUpperCase()\r\n  }\r\n}\r\n\r\nexport default GenerateView\r\n","class GenerateRoutes {\r\n\r\n  constructor(obj) {\r\n    if (!obj || Object.keys(obj).length <= 0) {\r\n      throw Error(\"Routes Data Not Found.\")\r\n    }\r\n\r\n    if (!obj.module) {\r\n      throw Error(\"Please Define Module Name.\")\r\n    }\r\n\r\n    // Module Name\r\n    this.module = obj.module\r\n    // Routes Type (simple, grouping)\r\n    this.type = (!obj.type) ? \"simple\" : obj.type\r\n    // API Content [API Routes]\r\n    this.apiContent = (!obj.apiContent) ? false : obj.apiContent\r\n\r\n    // Route Path Prefix\r\n    this.routePrefix = this.module.toLocaleLowerCase()\r\n    if (obj.routePrefix) {\r\n      this.routePrefix = obj.routePrefix\r\n    }\r\n\r\n    // Routes Data\r\n    if (!obj.routes || obj.routes.length <= 0) {\r\n      this.routes = [\r\n        { path: \"\", controller: obj.module, method: \"index\", requestMethod: \"get\" },\r\n        { path: \"/insert\", controller: obj.module, method: \"insert\", requestMethod: \"get\" },\r\n        { path: \"/update\", controller: obj.module, method: \"update\", requestMethod: \"get\" },\r\n        { path: \"/delete\", controller: obj.module, method: \"delete\", requestMethod: \"get\" },\r\n      ]\r\n    } else {\r\n      this.routes = obj.routes\r\n    }\r\n\r\n    // API Route Prefix\r\n    this.apiRoutePrefix = \"api\"\r\n    if (obj.apiRoutePrefix) {\r\n      this.apiRoutePrefix = obj.apiRoutePrefix\r\n    }\r\n\r\n    // API Routes Data\r\n    if (!obj.apiRoutes || obj.apiRoutes.length <= 0) {\r\n      this.apiRoutes = [\r\n        { path: \"\", controller: obj.module + \"_api\", method: \"index\", requestMethod: \"post\" },\r\n        { path: \"/insert\", controller: obj.module + \"_api\", method: \"insert\", requestMethod: \"post\" },\r\n        { path: \"/update\", controller: obj.module + \"_api\", method: \"update\", requestMethod: \"post\" },\r\n        { path: \"/delete\", controller: obj.module + \"_api\", method: \"delete\", requestMethod: \"post\" },\r\n      ]\r\n    } else {\r\n      this.apiRoutes = obj.apiRoutes\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get Routes Content\r\n   */\r\n  getRoutes() {\r\n\r\n    /**\r\n     * Routes to \\Admin\\Users::index()\r\n        $routes->add('admin/users', 'Users::index', ['namespace' => 'Admin']);\r\n      * Routes Simple Mode\r\n        // Users Module Routes\r\n        $routes->get('/users', 'Users::index');\r\n        $routes->get('/users/insert', 'Users::insert');\r\n        $routes->get('/users/update', 'Users::update');\r\n        $routes->get('/users/delete', 'Users::delete');\r\n      */\r\n    if (this.type === \"simple\")\r\n      return this.simpleRoutes();\r\n    else\r\n      return this.groupingRoutes();\r\n  }\r\n\r\n  /**\r\n   * Generate Simple Routes Content\r\n   */\r\n  simpleRoutes() {\r\n    if (!this.routes || this.routes.length <= 0) {\r\n      throw Error(\"Route Names Data Not Found.\")\r\n    }\r\n\r\n    // Empty Routes File Content\r\n    var moduleRoutes = \"\";\r\n\r\n    // Default First Lines\r\n    moduleRoutes += \"<?php \\n\\n\";\r\n    moduleRoutes += \"// \" + this.module + \" Module Routes\\n\";\r\n\r\n    for (const route of this.routes) {\r\n      if (route.path !== undefined && route.method && route.controller) {\r\n        moduleRoutes += \"$routes->\" + route.requestMethod + \"('/\" + this.routePrefix + route.path + \"', '\" + route.controller + \"::\" + route.method + \"');\";\r\n        moduleRoutes += \"\\n\";\r\n      }\r\n    }\r\n\r\n    // Module API Routes\r\n    if (this.apiContent === true) {\r\n      moduleRoutes += \"\\n// \" + this.module + \" Module API Routes\\n\";\r\n      for (const route of this.apiRoutes) {\r\n        if (route.path !== undefined && route.method && route.controller) {\r\n          moduleRoutes += \"$routes->\" + route.requestMethod + \"('/\" + this.apiRoutePrefix + \"/\" + this.routePrefix + route.path + \"', '\" + route.controller + \"::\" + route.method + \"');\";\r\n          moduleRoutes += \"\\n\";\r\n        }\r\n      }\r\n    }\r\n\r\n    return moduleRoutes;\r\n  }\r\n\r\n  /**\r\n   * Generate Grouping Routes Content\r\n   * \r\n   * https://codeigniter.com/user_guide/incoming/routing.html#grouping-routes\r\n   */\r\n  groupingRoutes() {\r\n    if (!this.routes || this.routes.length <= 0) {\r\n      throw Error(\"Route Names Data Not Found.\")\r\n    }\r\n\r\n    // Empty Routes File Content\r\n    var moduleRoutes = \"\";\r\n\r\n    moduleRoutes += \"<?php \\n\\n\";\r\n    moduleRoutes += \"// \" + this.module + \" Module Routes\\n\";\r\n    moduleRoutes += \"$routes->group('\" + this.routePrefix + \"', function($routes) {\";\r\n    moduleRoutes += \"\\n\";\r\n\r\n    for (const route of this.routes) {\r\n      if (route.path !== undefined && route.method && route.controller) {\r\n        moduleRoutes += \"  $routes->\" + route.requestMethod + \"('\" + route.path.slice(1) + \"', '\" + route.controller + \"::\" + route.method + \"');\";\r\n        moduleRoutes += \"\\n\";\r\n      }\r\n    }\r\n\r\n    moduleRoutes += \"});\\n\";\r\n\r\n    // Module API Routes\r\n    if (this.apiContent === true) {\r\n      moduleRoutes += \"\\n// \" + this.module + \" Module API Routes\\n\";\r\n      moduleRoutes += \"$routes->group('\" + this.apiRoutePrefix + \"', function($routes) {\\n\";\r\n      moduleRoutes += \"  $routes->group('\" + this.routePrefix + \"', function($routes) {\\n\";\r\n      for (const route of this.apiRoutes) {\r\n        if (route.path !== undefined && route.method && route.controller) {\r\n          moduleRoutes += \"    $routes->\" + route.requestMethod + \"('\" + route.path.slice(1) + \"', '\" + route.controller + \"::\" + route.method + \"');\";\r\n          moduleRoutes += \"\\n\";\r\n        }\r\n      }\r\n      moduleRoutes += \"  });\\n\";\r\n      moduleRoutes += \"});\\n\";\r\n    }\r\n\r\n    return moduleRoutes;\r\n  }\r\n}\r\n\r\nexport default GenerateRoutes\r\n","var $ = require('../internals/export');\nvar toObject = require('../internals/to-object');\nvar nativeKeys = require('../internals/object-keys');\nvar fails = require('../internals/fails');\n\nvar FAILS_ON_PRIMITIVES = fails(function () { nativeKeys(1); });\n\n// `Object.keys` method\n// https://tc39.github.io/ecma262/#sec-object.keys\n$({ target: 'Object', stat: true, forced: FAILS_ON_PRIMITIVES }, {\n  keys: function keys(it) {\n    return nativeKeys(toObject(it));\n  }\n});\n","function _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nexport default function _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}","var fails = require('../internals/fails');\nvar whitespaces = require('../internals/whitespaces');\n\nvar non = '\\u200B\\u0085\\u180E';\n\n// check that a method works with the correct list\n// of whitespaces and has a correct name\nmodule.exports = function (METHOD_NAME) {\n  return fails(function () {\n    return !!whitespaces[METHOD_NAME]() || non[METHOD_NAME]() != non || whitespaces[METHOD_NAME].name !== METHOD_NAME;\n  });\n};\n","export default function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}","class GenerateController {\r\n\r\n  constructor(obj) {\r\n    if (!obj || Object.keys(obj).length <= 0) {\r\n      throw Error(\"Controller Data Not Found.\")\r\n    }\r\n\r\n    if (!obj.module) {\r\n      throw Error(\"Please Define Module Name.\")\r\n    }\r\n\r\n    // Module Name\r\n    this.module = obj.module\r\n    // API Content [API Routes]\r\n    this.apiContent = (!obj.apiContent) ? false : obj.apiContent\r\n\r\n    // Route Path Prefix\r\n    this.routePrefix = this.module.toLocaleLowerCase()\r\n    if (obj.routePrefix) {\r\n      this.routePrefix = obj.routePrefix\r\n    }\r\n\r\n    // Routes Data\r\n    if (!obj.routes || obj.routes.length <= 0) {\r\n      this.routes = [\r\n        { path: \"\", controller: obj.module, method: \"index\", requestMethod: \"get\" },\r\n        { path: \"/insert\", controller: obj.module, method: \"insert\", requestMethod: \"get\" },\r\n        { path: \"/update\", controller: obj.module, method: \"update\", requestMethod: \"get\" },\r\n        { path: \"/delete\", controller: obj.module, method: \"delete\", requestMethod: \"get\" },\r\n      ]\r\n    } else {\r\n      this.routes = obj.routes\r\n    }\r\n\r\n    // API Route Prefix\r\n    this.apiRoutePrefix = \"api\"\r\n    if (obj.apiRoutePrefix) {\r\n      this.apiRoutePrefix = obj.apiRoutePrefix\r\n    }\r\n\r\n    // API Routes Data\r\n    if (!obj.apiRoutes || obj.apiRoutes.length <= 0) {\r\n      this.apiRoutes = [\r\n        { path: \"\", controller: obj.module + \"_api\", method: \"index\", requestMethod: \"post\" },\r\n        { path: \"/insert\", controller: obj.module + \"_api\", method: \"insert\", requestMethod: \"post\" },\r\n        { path: \"/update\", controller: obj.module + \"_api\", method: \"update\", requestMethod: \"post\" },\r\n        { path: \"/delete\", controller: obj.module + \"_api\", method: \"delete\", requestMethod: \"post\" },\r\n      ]\r\n    } else {\r\n      this.apiRoutes = obj.apiRoutes\r\n    }\r\n\r\n    // Database Data\r\n    if (obj.dbTableName)\r\n      this.dbTableName = obj.dbTableName\r\n\r\n    if (obj.dbTableColumn)\r\n      this.dbTableColumn = obj.dbTableColumn\r\n\r\n    // Is Module Method Content Fill\r\n    this.isModuleMethodContentFill = false\r\n  }\r\n\r\n  /**\r\n   * Get Controller\r\n   */\r\n  getController() {\r\n\r\n    // Empty Controller File Content\r\n    var moduleController = \"\";\r\n\r\n    // Default First Lines\r\n    moduleController += \"<?php namespace App\\\\Controllers;\\n\\n\";\r\n    moduleController += \"class \"+ this.module +\" extends BaseController\\n\";\r\n    moduleController += \"{\\n\";\r\n\r\n    for (const route of this.routes) {\r\n      if (route.path !== undefined && route.method && route.controller) {\r\n        moduleController += \"  /**\\n\";\r\n        moduleController += \"   * \" + route.method.toUpperCase() + \" \" + this.overrideControllerName(route.controller) + \"\\n\";\r\n        moduleController += \"   */\\n\";\r\n        moduleController += \"  public function \" + route.method + \"() {\";\r\n        moduleController += \"\\n\";\r\n\r\n        if (this.isModuleMethodContentFill) {\r\n\r\n          if (route.method === \"insert\") {\r\n            moduleController += this.insertMethodContent()\r\n          }\r\n\r\n        } else {\r\n          moduleController += \"    echo '\" + route.method.toUpperCase() + \" \" + this.overrideControllerName(route.controller) + \"';\";\r\n        }\r\n\r\n        moduleController += \"\\n\";\r\n        moduleController += \"  }\";\r\n        moduleController += \"\\n\\n\";\r\n      }\r\n    }\r\n\r\n    moduleController += \"}\\n\";\r\n\r\n    return moduleController\r\n  }\r\n\r\n  /**\r\n   * Get API Controller\r\n   */\r\n  getAPIController() {\r\n\r\n    // Empty API Controller File Content\r\n    var moduleController = \"\";\r\n\r\n    // Default First Lines\r\n    moduleController += \"<?php namespace App\\\\Controllers\\\\API;\\n\\n\";\r\n    moduleController += \"class \"+ this.module +\"_api extends BaseController\\n\";\r\n    moduleController += \"{\\n\";\r\n\r\n    for (const route of this.apiRoutes) {\r\n      if (route.path !== undefined && route.method && route.controller) {\r\n        moduleController += \"  /**\\n\";\r\n        moduleController += \"   * API: \" + route.method.toUpperCase() + \" \" + this.overrideControllerName(this.module) + \"\\n\";\r\n        moduleController += \"   */\\n\";\r\n        moduleController += \"  public function \" + route.method + \"() {\";\r\n        moduleController += \"\\n\";\r\n        moduleController += \"    echo '\" + route.method.toUpperCase() + \" \" + this.overrideControllerName(this.module) + \" API';\";\r\n        moduleController += \"\\n\";\r\n        moduleController += \"  }\";\r\n        moduleController += \"\\n\\n\";\r\n      }\r\n    }\r\n\r\n    moduleController += \"}\\n\";\r\n\r\n    return moduleController\r\n  }\r\n\r\n  /**\r\n   * [PRIVATE]: Module Insert Method Content\r\n   */\r\n  insertMethodContent() {\r\n    var content = \"\"\r\n\r\n    // Form Validation\r\n    content += this.formValidation()\r\n\r\n    content += \"\\n\\n\"\r\n    content += \"\\\r\n    $validation->withRequest($this->request)->run();\\n\\\r\n    if (!empty($validation->getErrors())) {\\n\\\r\n      echo view('\" + this.module.toLocaleLowerCase() + \"/insert_\" + this.module.toLocaleLowerCase() + \"');\\n\\\r\n    } else {\\n\\\r\n    }\\n\\\r\n    \"\r\n\r\n    return content\r\n  }\r\n\r\n  /**\r\n   * [PRIVATE]: Module Update Method Content\r\n   */\r\n  updateMethodContent() {\r\n\r\n  }\r\n\r\n  /**\r\n   * [PRIVATE]: Module Delete Method Content\r\n   */\r\n  deleteMethodContent() {\r\n\r\n  }\r\n\r\n  /**\r\n   * [PRIVATE]: Form Validation Content\r\n   */\r\n  formValidation() {\r\n\r\n    /**\r\n      $validation->setRules([\r\n        'full_name' => ['label' => 'full name', 'rules' => 'required|string'],\r\n        'email' => ['rules' => 'required|valid_email|string'],\r\n        // 'mobile' => ['label' => 'mobile', 'rules' => 'if_exist|numeric|min_length[10]|max_length[10]'],\r\n      ]);\r\n    */\r\n\r\n    if (!this.dbTableName) {\r\n      throw Error(\"Database Table Name Required.\")\r\n    }\r\n\r\n    if (!this.dbTableColumn) {\r\n      throw Error(\"Database Table Column Name Required.\")\r\n    }\r\n\r\n    // Check First Validation is Exist\r\n    var checkFirstValidationRule = true\r\n\r\n    // Validation Content\r\n    var content = \"    \"\r\n    content += \"/** \\n\\\r\n     * [LOAD]: Validation Library \\n\\\r\n     * https://codeigniter.com/user_guide/libraries/validation.html \\n\\\r\n     */\\n\"\r\n    content += \"    \"\r\n    content += \"$validation = \\\\Config\\\\Services::validation();\"\r\n    content += \"\\n\"\r\n    content += \"    \"\r\n    content += \"// Validation Rules\"\r\n    content += \"\\n\"\r\n\r\n    // Database Column Name\r\n    if (this.dbTableColumn.length > 0) {\r\n      this.dbTableColumn.forEach(col => {\r\n        if (col.validationRules && col.validationRules.length > 0) {\r\n\r\n          // First Validation Rule Exist\r\n          if (checkFirstValidationRule) {\r\n            checkFirstValidationRule = false\r\n          content += \"    \"\r\n          content += \"$validation->setRules([\"\r\n          }\r\n\r\n          content += \"\\n\"\r\n\r\n          // Form Validation\r\n          content += \"      \"\r\n          content += \"'\" + col.name + \"' => [\"\r\n          // Form Validation Label\r\n          if (col.label && col.label !== \"\") {\r\n            content += \"'label' => '\" + col.label + \"', \"\r\n          }\r\n          // Form Validation Rules\r\n          content += \"'rules' => '\"\r\n          col.validationRules.forEach(rule => {\r\n            if (rule.value && rule.value !== \"\") {\r\n              content += rule.name + \"[\" + rule.value + \"]|\"\r\n            } else {\r\n              content += rule.name + \"|\"\r\n            }\r\n          });\r\n          // Remove Last Character '|'\r\n          content = content.slice(0, -1)\r\n          content += \"'],\"\r\n        }\r\n      });\r\n\r\n      content += \"\\n\"\r\n\r\n      if (!checkFirstValidationRule)\r\n        content += \"    ]);\"\r\n    }\r\n\r\n    return content\r\n  }\r\n\r\n  /**\r\n   * [PRIVATE]: Override Controller Name\r\n   * @param {*} name \r\n   * -------------------------------------\r\n   * [Users to USERS]\r\n   * [People_message to PEOPLE MESSAGE]\r\n   */\r\n  overrideControllerName(name) {\r\n    if (!name) {\r\n      return\r\n    }\r\n\r\n    if (name.indexOf(\"_\") !== -1) {\r\n      return name.replace(/_/g, \" \").toUpperCase()\r\n    }\r\n    return name.toUpperCase()\r\n  }\r\n}\r\n\r\nexport default GenerateController","class GenerateModel {\r\n\r\n  constructor(obj) {\r\n    if (!obj || Object.keys(obj).length <= 0) {\r\n      throw Error(\"Model Data Not Found.\")\r\n    }\r\n\r\n    if (!obj.module) {\r\n      throw Error(\"Please Define Module Name.\")\r\n    }\r\n\r\n    if (!obj.table) {\r\n      throw Error(\"Please Define Module Table Name.\")\r\n    }\r\n\r\n    // Module Name\r\n    this.module = obj.module\r\n\r\n    // Module Table Name\r\n    this.table = obj.table\r\n\r\n    // Module Table Column Names\r\n    this.tableColumn = obj.tableColumn\r\n  }\r\n\r\n  /**\r\n   * Get Model Content\r\n   */\r\n  getModel() {\r\n\r\n    // Empty Model File Content\r\n    var moduleModel = \"\";\r\n\r\n    // Default First Lines\r\n    moduleModel += \"<?php namespace App\\\\Models;\\n\\n\";\r\n    moduleModel += \"use CodeIgniter\\\\Database\\\\ConnectionInterface;\\n\";\r\n    moduleModel += \"use CodeIgniter\\\\Model;\\n\\n\";\r\n    moduleModel += \"class \"+ this.module +\"Model extends Model\\n\";\r\n    moduleModel += \"{\\n\";\r\n\r\n    moduleModel += \"  protected $table = '\" + this.table + \"';\\n\";\r\n    moduleModel += \"  protected $primaryKey = 'id';\\n\";\r\n    moduleModel += \"  protected $allowedFields = \" + JSON.stringify(this.tableColumn) + \";\\n\";\r\n\r\n    moduleModel += \"  protected $useTimestamps = true;\\n\";\r\n    moduleModel += \"  protected $createdField  = 'created_at';\\n\";\r\n    moduleModel += \"  protected $updatedField  = 'updated_at';\\n\\n\";\r\n\r\n    moduleModel += \"  // protected $useSoftDeletes = true;\\n\";\r\n    moduleModel += \"  // protected $deletedField  = 'deleted_at';\\n\";\r\n\r\n    moduleModel += \"  // protected $skipValidation  = false;\\n\\n\";\r\n\r\n    moduleModel += \"  protected $returnType = 'App\\\\Entities\\\\\" + this.module + \"';\\n\";\r\n\r\n    moduleModel += \"}\\n\";\r\n\r\n    return moduleModel\r\n  }\r\n\r\n  /**\r\n   * Get Model Entities Content\r\n   */\r\n  getModelEntities() {\r\n\r\n    // Empty Model Entities File Content\r\n    var moduleModelEntities = \"\";\r\n\r\n    // Default First Lines\r\n    moduleModelEntities += \"<?php namespace App\\\\Entities;\\n\\n\";\r\n    moduleModelEntities += \"use CodeIgniter\\\\Entity;\\n\";\r\n    moduleModelEntities += \"\\n\";\r\n    moduleModelEntities += \"class \"+ this.module +\" extends Entity\\n\";\r\n    moduleModelEntities += \"{\\n\";\r\n\r\n    moduleModelEntities += \"  protected $table = '\" + this.table + \"';\\n\";\r\n    \r\n    moduleModelEntities += \"}\\n\";\r\n\r\n    return moduleModelEntities\r\n  }\r\n}\r\n\r\nexport default GenerateModel"],"sourceRoot":""}